package tn.com.st2i.prj.admin.dao.impl;

/**
 * Generated by easyfaces Hibernate Tools 4.3.1
 */


import java.util.Date;
import java.util.List;

import tn.com.st2i.prj.admin.dao.IVAdmLogAccesDao;
import tn.com.st2i.prj.admin.model.AdmFonc;
import tn.com.st2i.prj.admin.model.AdmUtilisateur;
import tn.com.st2i.prj.admin.model.VAdmLogAcces;

import com.easyfaces.dao.model.TableGen;
import com.easyfaces.dao.request.ClauseParameterExists;
import com.easyfaces.dao.request.EnumTypOp;
import com.easyfaces.dao.request.EnumTypOrdre;
import com.easyfaces.dao.request.Request;
import com.easyfaces.dao.tools.ManagerDao;

import org.springframework.stereotype.Repository;

@Repository("vAdmLogAccesDao")
public class VAdmLogAccesDao extends ManagerDao<VAdmLogAcces, Long> implements
		IVAdmLogAccesDao {

	public List<TableGen> getListLogAccess(String login, String nom,
			Date dateDebut, Date dateFin, String adr, Long idFonc,
			Long idParent, Boolean echec) throws Exception {

		Request requete = new Request(VAdmLogAcces.class, VAdmLogAcces._idLog);

		requete.addField(VAdmLogAcces._login);
		requete.addField(VAdmLogAcces._nom);
		requete.addField(VAdmLogAcces._datLog);
		requete.addField(VAdmLogAcces._timeLog);
		requete.addField(VAdmLogAcces._remoteAddr);
		requete.addField(VAdmLogAcces._browser);
		requete.addField(VAdmLogAcces._labelFonc);
		requete.addField(VAdmLogAcces._accesFr);
		requete.addField(VAdmLogAcces._accesAr);

		requete.setMaxRow(500);

		ClauseParameterExists existLogin = new ClauseParameterExists();
		existLogin.setJoinClass(AdmUtilisateur.class);
		existLogin.setJoinColumn(VAdmLogAcces._idUser, AdmUtilisateur._idUser);
		existLogin.setNegation(false);
		existLogin
				.setOperationString(EnumTypOp.StringParameter.CENTER_WORD_LIKE);
		existLogin.setParameterClause(AdmUtilisateur._login, login);
		requete.addClause(existLogin);

		ClauseParameterExists existNom = new ClauseParameterExists();
		existNom.setJoinClass(AdmUtilisateur.class);
		existNom.setJoinColumn(VAdmLogAcces._idUser, AdmUtilisateur._idUser);
		existNom.setNegation(false);
		existNom.setOperationString(EnumTypOp.StringParameter.CENTER_WORD_LIKE);
		existNom.setParameterClause(AdmUtilisateur._nomUser, nom);
		requete.addClause(existNom);

		requete.addClauseDate(VAdmLogAcces._datLog,
				EnumTypOp.AllParameter.GREATER_EQUAL, dateDebut);

		requete.addClauseDate(VAdmLogAcces._datLog,
				EnumTypOp.AllParameter.SMALLER_EQUAL, dateFin);

		requete.addClauseString(VAdmLogAcces._remoteAddr,
				EnumTypOp.StringParameter.EQUAL, adr);

		requete.addClauseLong(VAdmLogAcces._idFonc, EnumTypOp.AllParameter.EQUAL,
				idFonc);

		if (idParent != null) {
			ClauseParameterExists existFonc = new ClauseParameterExists();
			existFonc.setJoinClass(AdmFonc.class);
			existFonc.setJoinColumn(VAdmLogAcces._idFonc, AdmFonc._idFonc);
			existFonc.addClause("AND id_parent=" + idParent);
			requete.addClause(existFonc);
		}

		if (echec != null && echec.equals(true)) {
			requete.addClauseString(VAdmLogAcces._acces,
					EnumTypOp.StringParameter.EQUAL, "ECHEC");
		}

		requete.addOrdre(VAdmLogAcces._datLog, EnumTypOrdre.DESC);
		requete.addOrdre(VAdmLogAcces._timeLog, EnumTypOrdre.DESC);

		return getList(requete);
	}

}
