package tn.com.st2i.prj.admin.model;

/**
 * Generated by easyfaces Hibernate Tools 4.3.1
 * 
 * Postgres dataBase
 *
 */
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import java.util.HashMap;
import java.util.Map;

import lombok.Data;

@Data
@Entity
@Table(name = "adm_fonc")
public class AdmFonc implements java.io.Serializable, Cloneable {
	private transient static final long serialVersionUID = 1L;

	public transient static final String _nameTable = "ADM_FONC";

	public transient static final String _idFonc = "ID_FONC";
	public transient static final String _idParent = "ID_PARENT";
	public transient static final String _idApp = "ID_APP";
	public transient static final String _cod = "COD";
	public transient static final String _label = "LABEL";
	public transient static final String _action = "ACTION";
	public transient static final String _icon = "ICON";
	public transient static final String _FAffMenu = "F_AFF_MENU";
	public transient static final String _FAffEtat = "F_AFF_ETAT";
	public transient static final String _FAdmin = "F_ADMIN";
	public transient static final String _desFonc = "DES_FONC";
	public transient static final String _desFoncAr = "DES_FONC_AR";
	public transient static final String _FValid = "F_VALID";
	public transient static final String _urlAcces = "URL_ACCES";

	@SuppressWarnings("serial")
	public static transient final Map<String, String> listType = new HashMap<String, String>() {
		{
			put(_idFonc, "LONG");
		}
		{
			put(_idParent, "LONG");
		}
		{
			put(_idApp, "LONG");
		}
		{
			put(_cod, "STRING");
		}
		{
			put(_label, "STRING");
		}
		{
			put(_action, "STRING");
		}
		{
			put(_icon, "STRING");
		}
		{
			put(_FAffMenu, "LONG");
		}
		{
			put(_FAffEtat, "LONG");
		}
		{
			put(_FAdmin, "LONG");
		}
		{
			put(_desFonc, "STRING");
		}
		{
			put(_desFoncAr, "STRING");
		}
		{
			put(_FValid, "LONG");
		}
		{
			put(_urlAcces, "STRING");
		}
	};
	@SequenceGenerator(allocationSize = 1, initialValue = 1, sequenceName = "SEQ_FONC_ID", name = "fonc_id_fonc_seq")
	@GeneratedValue(generator = "fonc_id_fonc_seq", strategy = GenerationType.SEQUENCE)
	@Id
	@Column(name = "id_fonc", unique = true, nullable = false)
	private Long idFonc;

	@Column(name = "id_parent")
	private Long idParent;

	@Column(name = "id_app", nullable = false)
	private Long idApp;

	@Column(name = "cod", nullable = false, length = 40)
	private String cod;

	@Column(name = "label", nullable = false, length = 300)
	private String label;

	@Column(name = "action", length = 300)
	private String action;

	@Column(name = "icon", length = 300)
	private String icon;

	@Column(name = "f_aff_menu", nullable = false)
	private Long FAffMenu;

	@Column(name = "f_aff_etat", nullable = false)
	private Long FAffEtat;

	@Column(name = "f_admin", nullable = false)
	private Long FAdmin;

	@Column(name = "des_fonc", nullable = false, length = 300)
	private String desFonc;

	@Column(name = "des_fonc_ar", nullable = false, length = 300)
	private String desFoncAr;

	@Column(name = "f_valid", nullable = false)
	private Long FValid;

	@Column(name = "url_acces", length = 1500)
	private String urlAcces;

	public AdmFonc clone() throws CloneNotSupportedException {
		return (AdmFonc) super.clone();
	}
}
