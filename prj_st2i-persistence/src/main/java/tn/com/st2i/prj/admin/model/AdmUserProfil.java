package tn.com.st2i.prj.admin.model;

/**
 * Generated by easyfaces Hibernate Tools 4.3.1
 * 
 * Postgres dataBase
 *
 */
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.SequenceGenerator;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import java.util.HashMap;
import java.util.Map;

import lombok.Data;

@Data
@Entity
@Table(name = "adm_user_profil", uniqueConstraints = @UniqueConstraint(columnNames = { "id_user", "id_profil" }))
public class AdmUserProfil implements java.io.Serializable, Cloneable {
	private transient static final long serialVersionUID = 1L;

	public transient static final String _nameTable = "ADM_USER_PROFIL";

	public transient static final String _idUserProfil = "ID_USER_PROFIL";
	public transient static final String _idUser = "ID_USER";
	public transient static final String _idProfil = "ID_PROFIL";
	public transient static final String _FValid = "F_VALID";
	public transient static final String _datExpire = "DAT_EXPIRE";

	@SuppressWarnings("serial")
	public static transient final Map<String, String> listType=new HashMap<String,String>(){{put(_idUserProfil,"LONG");}{put(_idUser,"LONG");}{put(_idProfil,"LONG");}{put(_FValid,"INTEGER");}{put(_datExpire,"DATE");}};

	@SequenceGenerator(allocationSize = 1, initialValue = 1, sequenceName = "adm_user_profil_id_user_profil_seq", name = "adm_user_profil_id_user_profil_seq")
	@GeneratedValue(generator = "adm_user_profil_id_user_profil_seq", strategy = GenerationType.SEQUENCE)
	@Id
	@Column(name = "id_user_profil", unique = true, nullable = false)
	private Long idUserProfil;

	@Column(name = "id_user", nullable = false)
	private Long idUser;

	@Column(name = "id_profil", nullable = false)
	private Long idProfil;

	@Column(name = "f_valid", nullable = false, precision = 1, scale = 0)
	private Integer FValid;

	@Column(name = "dat_expire", length = 13)
	private Date datExpire;

	public AdmUserProfil clone() throws CloneNotSupportedException {
		return (AdmUserProfil) super.clone();
	}
}
